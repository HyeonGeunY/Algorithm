# sub_len을 정한 후 앞에서 부터 sub_len 길이 만큼 더해가면서 최대값을 갱신
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
        result = -1e4 - 1
        
        for sub_len in range(1, len(nums) + 1):
            for i in range(len(nums) + 1 - sub_len):    
                result = max(result, sum(nums[i : i+sub_len]))
                
        return result
# ⇒ Time out 문제 발생.

# 앞에서 부터 합을 누적

# 1. 만약 이전까지 누적된 값 + 현재 값 < 현재값 이라면 현재 값을 저장
# 2. 합의 list에서 최대값 반환

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        
        sums = [] # 누적 합을 계산할 리스트
        
        for i in range(len(nums)):
            if i == 0:
                sums.append(nums[i])
                continue
            
            if sums[i - 1] + nums[i] < nums[i]: # 누적값 + 현재값 < 현재값 => 현재 값
                sums.append(nums[i])
            else: # 그 외 => 누적 값
                sums.append(sums[i - 1] + nums[i])
                
        return max(sums)

# 앞에서 부터 이전 값이 음수라면 버리는 것으로 바꾸는 것으로 코드를 보다 깔끔하게 만들 수 있다.

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
    
        for i in range(1, len(nums)):
            nums[i] = nums[i-1] + nums[i] if nums[i - 1] > 0 else nums[i]
                
        return max(nums)